rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function isUserRole(role) {
      // request.auth is available if the user is authenticated
      // exists() checks if a document path exists
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid))
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // READ: Any authenticated user can read user profiles (e.g., to see names).
      allow read: if request.auth != null;

      // CREATE: Anyone can create their own user document during registration.
      // We check that the document ID matches the user's own UID.
      allow create: if request.auth.uid == userId;

      // UPDATE: Only management can update user documents.
      // This is the key rule that prevents staff from promoting themselves.
      allow update: if isUserRole('management');

      // DELETE: Only management can delete users.
      allow delete: if isUserRole('management');
    }

    // Rules for the 'shifts' collection
    match /shifts/{shiftId} {
      // READ: Any authenticated user can view shifts.
      allow read: if request.auth != null;

      // WRITE (Create, Update, Delete): Only management can manage shifts.
      allow write: if isUserRole('management');
    }
  }
}
